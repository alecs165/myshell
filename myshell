#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <sys/wait.h> 
#include <limits.h>
#include <unistd.h>
#include <fcntl.h>

void myPrint(char *msg)
{
    write(STDOUT_FILENO, msg, strlen(msg));
}


void cd_implementation(char args[513]){
    char err[30] = "An error has occurred\n";
    //if no path typed, sending to home directory
    //trimming leading whitespace
    int length = strlen(args);
    int i = 0;
    while(i < length && (args[i] == '\t' || args[i] == ' ')){
        i++;
    }
    if (i > 0) {
        memmove(args, args + i, length - i + 1); 
    }
    if(strlen(args) == 0){
        chdir(getenv("HOME"));
    }else{
        if(chdir(args)){
            myPrint(err);
        }
    }
}

// void free_args(char *** args, int n_cmd){
//     for(int i = 0; i < n_cmd; i++){
//         if(args[i] != NULL){
//             int j = 0;
//             while(args[i][j]){
//                 free(args[i][j]);
//                 j++;
//             }
//             free(args[i]);
//         }
//     }
// }


int redirect(char arg[513]){
    //splitting based off the < character
    char err[30] = "An error has occurred\n";
    int status;
    char og_str[513];
    strcpy(og_str,arg);
    char **tmp_args[3] = {NULL};
    for(int i = 0; i < 3; i++){
        tmp_args[i] = malloc(sizeof(char *) * 513);
    }
    char buffer[513];
    strcpy(buffer, arg);

    int l = 0;
    int plus_mode = 0;
    char *split = strtok(buffer, ">");
    if(!split && strlen(arg)){
        myPrint(err);
        return 1;
    }
    char last_str[513];
    while(split){
        if (l == 1 ){
            
            if(split[0] == '+'){
                //>+
                plus_mode = 1;
                //removing the first character by essentially
                //overriding it
                memmove(split, split + 1, strlen(split + 1) + 1);
            }
            if(split[0] == ' '){
                memmove(split, split + 1, strlen(split + 1) + 1);
            }
        }
        //everything in first argument, will splice off string later
        //get rid of trailing white spaces
        int len = strlen(split);
        while(len > 0 && (split[len - 1] == ' ' || split[len - 1] == '\t')){
            len--;
        }
        strcpy(last_str,split);
        split[len] = '\0';
        if(len == 0){
            myPrint(err);
            return 1;
        }
        if(l == 1 && split[len-1] == '>'){
            myPrint(err);
            return 1;
        }
        tmp_args[l][0] = strdup(split);
        if(l >= 2){
            myPrint(err);
            return 1;
        }
        
        split = strtok(NULL, ">");
        l++;
    }

    if(l > 2){
        myPrint(err);
        //want to not enter the other loop
        return 1;
    }else if (l == 1){
        // //only redirected if our changed str is diff from our original
        if(strlen(last_str) && (strcmp(last_str, og_str))){
            myPrint(err);
            return 1;
        }else{
            return 0;
        }
    }
    if('>' == og_str[strlen(og_str)-1]){
        myPrint(err);
        return 1;
    }
    //now just getting rid of spaces on both args
    split = strtok(tmp_args[0][0], " \t");

    if(!split){
        myPrint(err);
        return 1;
    }
    char *cmds[513];
    int j = 0;
    while(split){
        cmds[j] = split;
        split = strtok(NULL, " ");
        j++;
    }
    cmds[j] = NULL;
    tmp_args[0] = cmds;
    tmp_args[2] = NULL;
    if(!strcmp(cmds[0],"cd") || !strcmp(cmds[0],"pwd") || !strcmp(cmds[0],"exit")){
        myPrint(err);
        return 1;

    }
    //going to deal with both types here
    if(l == 2 || plus_mode){
        //since only redirecting one at a time,
        //already forked so no need to do so
            int fd;
            int og_fd = dup(STDOUT_FILENO);
            if((fd = open(tmp_args[1][0], O_RDWR)) != -1 && plus_mode){
                int fd_tmp = fileno(tmpfile());
                if(dup2(fd_tmp, STDOUT_FILENO) == -1){
                    dup2(og_fd,STDOUT_FILENO);
                    myPrint(err);
                    return 1;
                }
                int fork_r = fork();
                if(fork_r == -1){
                    myPrint(err);
                    exit(1);
                }else if(!fork_r){
                    if(execvp(tmp_args[0][0], tmp_args[0]) == -1){
                        dup2(og_fd,STDOUT_FILENO);
                        myPrint(err);
                        //child, so need to exit
                        return 1;
                    }
                }else{
                    wait(&status);
                    dup2(1,1);
                    lseek(fd_tmp, 0, SEEK_END);
                    char buffer[513];
                    size_t read_bytes;
                    while((read_bytes = read(fd, buffer, 513))){
                        if(read_bytes == -1){
                            //throwing an error for some reason
                            dup2(og_fd,STDOUT_FILENO);
                            myPrint(err);
                            exit(1);
                        }
                        //writing to the tmp file
                        write(fd_tmp,buffer,read_bytes);
                    }
                    //now writing everything back to the og file
                    lseek(fd, 0, 0);
                    lseek(fd_tmp, 0, 0);
                    while((read_bytes = read(fd_tmp, buffer, 513))){
                        if(read_bytes == -1){
                            //throwing an error for some reason
                            dup2(og_fd,STDOUT_FILENO);
                            myPrint(err);
                            exit(1);
                        }
                        //writing to the tmp file
                        write(fd,buffer,read_bytes);
                    }
                }
                close(fd);
                close(fd_tmp);
            }else{
                if(fd != -1){
                    //attempted to write to an existing file with simple >
                    dup2(og_fd,STDOUT_FILENO);
                    myPrint(err);
                    //no need to exit shell
                    return 1;
                }
                //if file DNE, then >+ behaves the same as >, creating a new file
                fd = open(tmp_args[1][0], O_RDWR | O_CREAT, 0666);
                if(fd == -1){
                    dup2(og_fd,STDOUT_FILENO);
                    myPrint(err);
                    return 1;
                }
                //redirecting stdout to the new file descriptor
                if(dup2(fd, STDOUT_FILENO) == -1){
                    //if dup2 fails
                    dup2(og_fd,STDOUT_FILENO);
                    myPrint(err);
                    exit(1);
                }
                int fork_r = fork();
                if(!fork_r){
                    if(execvp(tmp_args[0][0], tmp_args[0]) == -1){
                        dup2(og_fd,STDOUT_FILENO);
                        myPrint(err);
                        //child, so need to exit
                        exit(1);
                    }
                }else{
                    wait(&status);
                }
                close(fd);
            }
            //reset where output is directed to
            dup2(og_fd,STDOUT_FILENO);
            close(og_fd);
            return 1;
        }
    return 0;
    }



void pwd_implementation(char args[513]){
    //pwd should be alone, no passing in anything
    //or else error
    char err[30] = "An error has occurred\n";
    // myPrint("HELLO");
    // myPrint(args);
    if(strlen(args) != 0){
        myPrint(err);
    }else{
        char rtn[PATH_MAX+1];
        getcwd(rtn, PATH_MAX);
        //add newline to the end
        strcat(rtn, "\n");
        myPrint(rtn);
    }
    
}



int main(int argc, char *argv[]) 
{
    //one over the max size to check if they inputted too much
    char cmd_buff[514];
    char *pinput;
    char *cmds[513]; 
    char ***args = malloc(513 * sizeof(char **));
    // int status;
    char err[30] = "An error has occurred\n";
    FILE *f = NULL;
    if((f = fopen(argv[1],"r"))){
        if(argv[2] != NULL){
            myPrint(err);
            exit(1);
        }
    }else if( argv[1]!= NULL){
        myPrint(err);
            exit(1);
    }
    
    while (1) {
        if(f == NULL){
            myPrint("myshell> ");
            pinput = fgets(cmd_buff, 514, stdin);
            if(strlen(pinput) >512){
                myPrint(err);
                //move fgets to the end of the input stream
                //consequentially setting pinput to null
                char ch;
                while((ch = getchar()) != '\n' && ch != EOF){
                    //getting rid of the extra characters in the input stream
                }
                pinput = NULL;
                //skipping the input
            }
        }else{
            pinput = fgets(cmd_buff, 514, f); 
            int len;
            if(!pinput){
                len = 0;
            }else{
                len = strlen(pinput);
                if(pinput[len -1] == '\n'){
                    len--;
                }
            }
            
            int skip = 1;
            if(len > 512){
                myPrint(pinput);
                    char ch;
                    while((ch = fgetc(f)) != '\n' && ch != EOF){
                        char c[2];
                        c[0] = ch;
                        c[1] = '\0';
                        myPrint(c);
                        //getting rid of the extra characters in the input stream
                    }
                myPrint("\n");
                myPrint(err);
                //skipping the input
                pinput = NULL;
            }else{

            if(pinput && cmd_buff[0] != '\n'){
                char tmp[514];
                char tmp2[514];
                strcpy(tmp,cmd_buff);
                if(tmp[strlen(cmd_buff) - 1] == '\n'){
                    tmp[strlen(cmd_buff) - 1] = '\0';
                }
                //skipping spaces
                strcpy(tmp2,tmp);
                char *skip_spaces_tabs = strtok(tmp2, " \t");

                if(skip_spaces_tabs && tmp[0]){
                    myPrint(tmp);
                    myPrint("\n");
                }
                if(!skip_spaces_tabs){
                    skip = 0;
                }
            }

            if(!pinput){
                fclose(f);
                exit(0);
            }
            }
            if(!skip){
                pinput = NULL;
            }
        }
        if (pinput) {
            //constructing the args
            int i = 0;
            //till the end
            //removing the newline at the end of the input
            while(cmd_buff[i]){
                if(cmd_buff[i] == '\n'){
                    cmd_buff[i] = '\0';
                    break;
                }
                i++;
            }
            //first splitting based off ;
            //ie multiple commands
            char *cmd = strtok(pinput, ";");
            int l_c = 0;
            while(cmd){
                cmds[l_c] = cmd;
                cmd = strtok(NULL, ";");
                l_c++;
            }
            //now iterating through each command
                //ie if something was entered in the command line
                //the splitting into tokens
                //now iterating through each command and running it
                i = 0;
                //batch prints the command to the shell
                while(i < l_c){
                    
                    char **arg = malloc(sizeof(char *)*513);
                    char tmp39[514];
                    strcpy(tmp39, cmds[i]);
                    if(strtok(tmp39, " \t") == NULL){
                        i++;
                        continue;
                    }
                    int redirected = redirect(cmds[i]);
                    if(redirected){
                        i++;
                        continue;
                    }
                    char cmd1[514] = {0};
                    strcpy(cmd1, cmds[i]);
                    //ignoring tabs and spaces on the first command
                    char *split = strtok(cmd1, " \t");
                    char built_in_args[514] = {0};
                    if(split){
                        //if split is null then just ignore
                            strcpy(built_in_args, &cmds[i][strlen(split)]) ;
                        if(strlen(split) < 514){
                            memmove(built_in_args, built_in_args + 1, strlen(built_in_args + 1) + 1);
                        }
                    int l = 0;
                    while(split){
                        arg[l] = split;
                        split = strtok(NULL, " ");
                        l++;
                    }
                    if(l == 1){
                        built_in_args[0] = '\0';
                    }

                    if(l){
                    //ie if entered spaces, ignoring
                    //custom
                    if(!strcmp(arg[0], "exit")){
                        if(strlen(built_in_args)){
                            myPrint(err);
                        }else{
                            exit(0);
                        }
                    }else if(!strcmp(arg[0], "pwd")){
                        pwd_implementation(built_in_args);
                    }else if(!strcmp(arg[0], "cd")){
                        cd_implementation(built_in_args);
                    }
                    arg[l] = NULL;
                    args[i] = arg;
                    //must check for redirection and implement such functionality
                        // not special commands
                        if(strcmp(args[i][0],"cd") && strcmp(args[i][0],"pwd") && strcmp(args[i][0],"exit")){
                            //already have forked for the first argument
                            //don't want to double print
                            int fork_r = fork();
                            int status;
                            if(fork_r == -1){
                                //for some reason fork errored
                                myPrint(err);
                                exit(1);
                            }else if(fork_r == 0){
                                if(execvp(args[i][0], args[i]) == -1){
                                    myPrint(err);
                                    exit(1);
                                }
                                exit(0);
                            }else{
                                wait(&status);
                            }
                        
                    }
                    }
                    
                    }
                    i++;
                }
            // free_args(args, l_c);
        }
    }
    free(args);
}
